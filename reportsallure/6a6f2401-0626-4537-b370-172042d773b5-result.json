{"name": "test_search_flight_1_stop_10___Aurangabad____New_Delhi____24_02_2024____2_Stop__", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input data-role=\"none\" readonly=\"readonly\" type=\"text\" autocomplete=\"false\" name=\"flight_origin_date\" placeholder=\" \" id=\"BE_flight_origin_date\" class=\"custom-date-input BE_flight_origin_date\"> is not clickable at point (250, 258). Other element would receive the click: <li class=\"ac_over\">...</li>\n  (Session info: chrome=121.0.6167.85)\nStacktrace:\n\tGetHandleVerifier [0x0058E123+48179]\n\t(No symbol) [0x00515D01]\n\t(No symbol) [0x003FD72D]\n\t(No symbol) [0x0043AF2B]\n\t(No symbol) [0x00439637]\n\t(No symbol) [0x0043768B]\n\t(No symbol) [0x00436826]\n\t(No symbol) [0x0042D770]\n\t(No symbol) [0x00453C8C]\n\t(No symbol) [0x0042D1AE]\n\t(No symbol) [0x00453F24]\n\t(No symbol) [0x0046AA1E]\n\t(No symbol) [0x00453A26]\n\t(No symbol) [0x0042B7BC]\n\t(No symbol) [0x0042C62D]\n\tGetHandleVerifier [0x008A7C33+3299139]\n\tGetHandleVerifier [0x008E5BF2+3553026]\n\tGetHandleVerifier [0x008E0BCC+3532508]\n\tGetHandleVerifier [0x0062494E+664670]\n\t(No symbol) [0x00520AB4]\n\t(No symbol) [0x0051BF08]\n\t(No symbol) [0x0051C02D]\n\t(No symbol) [0x0050DD00]\n\tBaseThreadInitThunk [0x756B6839+25]\n\tRtlGetFullPathName_UEx [0x7769906F+1215]\n\tRtlGetFullPathName_UEx [0x7769903D+1165]", "trace": "self = <testcases.test_caseone.Test_Search_And_verify_Filter testMethod=test_search_flight_1_stop_10___Aurangabad____New_Delhi____24_02_2024____2_Stop__>\ndepart_location = 'Aurangabad', arrival_location = 'New Delhi'\ndeparture_date = '24/02/2024', stops = '2 Stop'\n\n    @data(*Utils.read_data_from_csv(\"D:/Cred_Rev2/TestFrameworkDemo/testdata/test_data.csv\"))\n    @unpack\n    def test_search_flight_1_stop(self, depart_location, arrival_location, departure_date, stops):\n        \"\"\"\n        # Launch the travel website\n        :return: travel launch page\n        \"\"\"\n        assert 'Yatra.com' in self.driver.title\n        self.log.info(self.driver.title)\n        # lp = LaunchPage(self.driver)\n        # search_flight_result = self.lp.search_flights('Aurangabad', 'Delhi', 24/02/2024)\n>       search_flight_result = self.lp.search_flights(depart_location, arrival_location, departure_date)\n\ntestcases\\test_caseone.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\yatra_launch_page.py:100: in search_flights\n    self.enter_departure_date(departure_date)\nPages\\yatra_launch_page.py:80: in enter_departure_date\n    self.get_departure_date_field()\nPages\\yatra_launch_page.py:45: in get_departure_date_field\n    return self.wait_until_element_clickable(By.ID, self.SELECT_DATE_FIELD).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BBA5C9D90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...unk [0x756B6839+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x7769906F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x7769903D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input data-role=\"none\" readonly=\"readonly\" type=\"text\" autocomplete=\"false\" name=\"flight_origin_date\" placeholder=\" \" id=\"BE_flight_origin_date\" class=\"custom-date-input BE_flight_origin_date\"> is not clickable at point (250, 258). Other element would receive the click: <li class=\"ac_over\">...</li>\nE         (Session info: chrome=121.0.6167.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0058E123+48179]\nE       \t(No symbol) [0x00515D01]\nE       \t(No symbol) [0x003FD72D]\nE       \t(No symbol) [0x0043AF2B]\nE       \t(No symbol) [0x00439637]\nE       \t(No symbol) [0x0043768B]\nE       \t(No symbol) [0x00436826]\nE       \t(No symbol) [0x0042D770]\nE       \t(No symbol) [0x00453C8C]\nE       \t(No symbol) [0x0042D1AE]\nE       \t(No symbol) [0x00453F24]\nE       \t(No symbol) [0x0046AA1E]\nE       \t(No symbol) [0x00453A26]\nE       \t(No symbol) [0x0042B7BC]\nE       \t(No symbol) [0x0042C62D]\nE       \tGetHandleVerifier [0x008A7C33+3299139]\nE       \tGetHandleVerifier [0x008E5BF2+3553026]\nE       \tGetHandleVerifier [0x008E0BCC+3532508]\nE       \tGetHandleVerifier [0x0062494E+664670]\nE       \t(No symbol) [0x00520AB4]\nE       \t(No symbol) [0x0051BF08]\nE       \t(No symbol) [0x0051C02D]\nE       \t(No symbol) [0x0050DD00]\nE       \tBaseThreadInitThunk [0x756B6839+25]\nE       \tRtlGetFullPathName_UEx [0x7769906F+1215]\nE       \tRtlGetFullPathName_UEx [0x7769903D+1165]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "\n        # Launch the travel website\n        :return: travel launch page\n        ", "attachments": [{"name": "log", "source": "b515e09f-0779-4dc8-8df8-161e68c125dc-attachment.txt", "type": "text/plain"}], "start": 1708519324905, "stop": 1708519337219, "uuid": "d34e3a54-a7b5-4fcd-aa2d-ac52d13fa63e", "historyId": "6d5163b00d2698617c59045ef44c85ef", "testCaseId": "6d5163b00d2698617c59045ef44c85ef", "fullName": "testcases.test_caseone.Test_Search_And_verify_Filter#test_search_flight_1_stop_10___Aurangabad____New_Delhi____24_02_2024____2_Stop__", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_caseone"}, {"name": "subSuite", "value": "Test_Search_And_verify_Filter"}, {"name": "host", "value": "DESKTOP-NEU5CCG"}, {"name": "thread", "value": "10272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_caseone"}]}