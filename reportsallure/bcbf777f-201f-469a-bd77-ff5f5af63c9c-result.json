{"name": "test_search_flight_1_stop_02___New_Delhi____Mumbai____28_02_2024____1_Stop__", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nStacktrace:\n\tGetHandleVerifier [0x00E5E123+48179]\n\t(No symbol) [0x00DE5D01]\n\t(No symbol) [0x00CCD5F0]\n\t(No symbol) [0x00CC1743]\n\t(No symbol) [0x00CF8449]\n\t(No symbol) [0x00CF3EC7]\n\t(No symbol) [0x00CF0A69]\n\t(No symbol) [0x00D2CA51]\n\t(No symbol) [0x00D2C5FA]\n\t(No symbol) [0x00D23A26]\n\t(No symbol) [0x00CFB7BC]\n\t(No symbol) [0x00CFC62D]\n\tGetHandleVerifier [0x01177C33+3299139]\n\tGetHandleVerifier [0x011B5BF2+3553026]\n\tGetHandleVerifier [0x011B0BCC+3532508]\n\tGetHandleVerifier [0x00EF494E+664670]\n\t(No symbol) [0x00DF0AB4]\n\t(No symbol) [0x00DEBF08]\n\t(No symbol) [0x00DEC02D]\n\t(No symbol) [0x00DDDD00]\n\tBaseThreadInitThunk [0x756B6839+25]\n\tRtlGetFullPathName_UEx [0x7769906F+1215]\n\tRtlGetFullPathName_UEx [0x7769903D+1165]", "trace": "request = <SubRequest 'setup' for <TestCaseFunction test_search_flight_1_stop_02___New_Delhi____Mumbai____28_02_2024____1_Stop__>>\nbrowser = 'chrome', url = 'https://www.yatra.com'\n\n    @pytest.fixture(autouse=True)\n    # @pytest.fixture(scope='class', autouse=True)\n    def setup(request, browser, url):\n        if browser == \"chrome\":\n            chrome_binary = \"D:/chrome-win64/chrome-win64/chrome.exe\"\n            options = webdriver.ChromeOptions()\n            options.binary_location = chrome_binary\n>           driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n\ntestcases\\conftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:209: in __init__\n    self.start_session(capabilities)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:293: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BBA5823D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"chrome not reachable\",\"message\":\"chrome not reachable\",\"stacktrace\":\"\\\\tG...unk [0x756B6839+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x7769906F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x7769903D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E5E123+48179]\nE       \t(No symbol) [0x00DE5D01]\nE       \t(No symbol) [0x00CCD5F0]\nE       \t(No symbol) [0x00CC1743]\nE       \t(No symbol) [0x00CF8449]\nE       \t(No symbol) [0x00CF3EC7]\nE       \t(No symbol) [0x00CF0A69]\nE       \t(No symbol) [0x00D2CA51]\nE       \t(No symbol) [0x00D2C5FA]\nE       \t(No symbol) [0x00D23A26]\nE       \t(No symbol) [0x00CFB7BC]\nE       \t(No symbol) [0x00CFC62D]\nE       \tGetHandleVerifier [0x01177C33+3299139]\nE       \tGetHandleVerifier [0x011B5BF2+3553026]\nE       \tGetHandleVerifier [0x011B0BCC+3532508]\nE       \tGetHandleVerifier [0x00EF494E+664670]\nE       \t(No symbol) [0x00DF0AB4]\nE       \t(No symbol) [0x00DEBF08]\nE       \t(No symbol) [0x00DEC02D]\nE       \t(No symbol) [0x00DDDD00]\nE       \tBaseThreadInitThunk [0x756B6839+25]\nE       \tRtlGetFullPathName_UEx [0x7769906F+1215]\nE       \tRtlGetFullPathName_UEx [0x7769903D+1165]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "\n        # Launch the travel website\n        :return: travel launch page\n        ", "start": 1708519139827, "stop": 1708519139827, "uuid": "6c664055-7ae2-4a0d-8de6-6cf4a64e03c7", "historyId": "3b7ec03ec6e44860d3edc5721f0bdf83", "testCaseId": "3b7ec03ec6e44860d3edc5721f0bdf83", "fullName": "testcases.test_caseone.Test_Search_And_verify_Filter#test_search_flight_1_stop_02___New_Delhi____Mumbai____28_02_2024____1_Stop__", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_caseone"}, {"name": "subSuite", "value": "Test_Search_And_verify_Filter"}, {"name": "host", "value": "DESKTOP-NEU5CCG"}, {"name": "thread", "value": "10272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_caseone"}]}